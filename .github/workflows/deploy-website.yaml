name: Deploy website

on:
  push:
    branches:
      - main
      - stage

  pull_request:
    branches:
      - main

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_VAR_REGION: ${{ secrets.TF_VAR_REGION }}
  TF_VAR_BUCKET_NAME: ${{ secrets.TF_VAR_BUCKET_NAME }}
  TF_VAR_DYNAMODB_TABLE: ${{ secrets.TF_VAR_DYNAMODB_TABLE }}
  TF_VAR_BUCKET_KEY: ${{ secrets.TF_VAR_BUCKET_KEY }}
  AWS_SSH_KEY_PRIVATE: ${{ secrets.AWS_SSH_KEY_PRIVATE }}
  AWS_SSH_KEY_PUBLIC: ${{ secrets.AWS_SSH_KEY_PUBLIC }}

jobs:
  terraform:
    name: Deploy infrastructure
    runs-on: ubuntu-latest
    outputs:
      SERVER_PUBLIC_IP: ${{ steps.set-ip.outputs.instance_public_ip}}
      SSH_PRVIVATE: ${{ steps.set-ssh-private.outputs.ssh_private }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      - name: Terraform format
        run: terraform fmt

      - name: Terraform init
        id: init
        run: terraform init -backend-config="bucket=$TF_VAR_BUCKET_NAME" -backend-config="dynamodb_table=$TF_VAR_DYNAMODB_TABLE" -backend-config="region=$TF_VAR_REGION"
        working-directory: ./terraform

      - name: Terraform validate
        run: terraform validate

      - name: Terraform plan
        id: plan
        run: terraform plan -out PLAN
        working-directory: ./terraform

      - name: Terraform apply
        id: apply
        run: terraform apply -auto-approve
        if: steps.plan.outcome == 'success'
        working-directory: ./terraform

      - name: Set output IP
        id: set-ip
        run: |
          echo "::set-output name=instance_public_ip::$(terraform output instance_public_ip)"

      - name: Set output SSH PRIVATE
        id: set-ssh-private
        run: |
          echo "::set-output name=ssh_private::$(terraform output ssh_private)"

  website:
    name: Deploy application
    runs-on: ubuntu-latest

    needs: terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set ip env variable
        run: echo SERVER_PUBLIC_IP=${{ needs.terraform.outputs.SERVER_PUBLIC_IP }} >> $GITHUB_ENV

      - name: Set ssh_private env variable
        run: echo SSH_PRIVATE=${{ needs.terraform.outputs.SSH_PRVIVATE }} >> $GITHUB_ENV

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./*
          file: Dockerfile
          push: true
          tags: lyndaaaudrey/website-repo:${{ github.sha }}

      - name: Deploy docker image to EC2
        uses: appleboy/ssh-action@master
        with:
          hosts: ${{ env.SERVER_PUBLIC_IP }}
          username: ubuntu
          key: ${{ env.SSH_PRVIVATE }}
          script: |
            sudo apt update
            sudo apt install docker.io -y
            sudo docker stop website || true
            sudo docker rm website || true
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/website-repo:${{ github.sha }}
            sudo docker run -d --name website -p 80:8080 ${{ secrets.DOCKER_USERNAME }}/website-repo:${{ github.sha }}
