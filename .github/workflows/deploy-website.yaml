name: Deploy website

on:
  push:
    branches:
      - main
      - stage

  pull_request:
    branches:
      - main

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_VAR_REGION: ${{ secrets.TF_VAR_REGION }}
  TF_VAR_BUCKET_NAME: ${{ secrets.TF_VAR_BUCKET_NAME }}
  TF_VAR_DYNAMODB_TABLE: ${{ secrets.TF_VAR_DYNAMODB_TABLE }}
  TF_VAR_BUCKET_KEY: ${{ secrets.TF_VAR_BUCKET_KEY }}
  AWS_SSH_KEY_PRIVATE: ${{ secrets.AWS_SSH_KEY_PRIVATE }}
  AWS_SSH_KEY_PUBLIC: ${{ secrets.AWS_SSH_KEY_PUBLIC }}

jobs:
  terraform:
    name: Deploy infrastructure
    runs-on: ubuntu-latest
    outputs:
      SERVER_PUBLIC_IP: ${{ steps.set-ip.outputs.instance_public_ip}}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      - name: Terraform format
        run: terraform fmt

      - name: Terraform init
        id: init
        run: terraform init -backend-config="bucket=$TF_VAR_BUCKET_NAME" -backend-config="dynamodb_table=$TF_VAR_DYNAMODB_TABLE" -backend-config="region=$TF_VAR_REGION"
        working-directory: ./terraform

      - name: Terraform validate
        run: terraform validate

      - name: Terraform plan
        id: plan
        run: terraform plan -out PLAN
        working-directory: ./terraform

      - name: Terraform apply
        id: apply
        run: terraform apply -auto-approve
        if: steps.plan.outcome == 'success'
        working-directory: ./terraform

      - name: Set output
        id: set-ip
        run: |-
          echo "::set-output name=instance_public_ip::$(terraform output instance_public_ip)"

  website:
    name: Deploy application
    runs-on: ubuntu-latest
    #Can be deploy infrastructure
    needs: terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set ip env variable
        run: echo SERVER_PUBLIC_IP=${{ needs.terraform.outputs.SERVER_PUBLIC_IP }} >> $GITHUB_ENV

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::333410513408:instance-profile/ec2-ecr-auth
          aws-region: us-east-1

      - name: Login to AWS ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-loging@v2
        with:
          registry-type: public

      - name: Build and push docker image
        env:
          REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          REGISTRY_ALIAS: my-ecr-public-registry-alias
          REPOSITORY: website-repo
          IMAGE_TAG: ${{ github.sha }}

        run: |-
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        working-directory: ./website

      - name: Deploy docker image to EC2
        env:
          REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          REPOSITORY: website-repo
          IMAGE_TAG: ${{ github.sha }}
          AWS_DEFAULT_REGION: us-east-1
        uses: appleboy/ssh-action@master
        with:
          hosts: ${{ env.SERVER_PUBLIC_IP }}
          username: ubuntu
          key: ${{ env.AWS_SSH_KEY_PRIVATE }}
          envs: AWS_SSH_KEY_PRIVATE,REGISTRY,REPOSITORY,IMAGE_TAG,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY, AWS_DEFAULT_REGION, TF_VAR_REGION
          script: |-
            sudo apt update
            sudo apt install docker.io -y
            sudo apt install awscli -y
            sudo $(aws ecr get-login --no-include-email --region us-east-1)
            sudo docker stop myappcontainer || true
            sudo docker rm myappcontainer || true
            sudo docker pull $REGISTRY/$REPOSITORY:$IMAGE_TAG
            sudo docker run -d --name myappcontainer -p 80:8080 $REGISTRY/$REPOSITORY:$IMAGE_TAG
